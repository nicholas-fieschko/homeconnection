proj steps:

useful spec examples in this repo: https://github.com/gitlabhq/gitlabhq/blob/master/spec/features/users_spec.rb#L8

remember, ITERATIONS. do not OVERplan, just make an iteration with basic, reasonable implementation of feature, you can always change and improve later

     > next: PROFILES

          > profile page displays fields legibly?

          > then SEARCH
               -> index page listing all
               -> ability to filter
               -> ability to sort
          > then messaging -- more reasonable to have substantial users to message before making messaging system

         > LATER (maybe next or end of this semester): geographic location w location search


     iterations:
          - accounts
     --------------------current-progress
          - search
               -> what does it mean to have a search feature?
               -> searching shows us an index page with a modified @users set: including only matches
               -> "searching" in our case mostly means filtering: check boxes etc are fine
                    > gender, provider status, later: location
               -> sorting is the same, with @users being sorted
               -> can think about a "different" kind of search in a later iteration 
          - messaging
          - exchange system ( most complicated? )
          - reviews
          - privacy controls

     still need:
          -> constraints/validations on data for user account / profiles

     would like:
          -> home page is:
               sign up, log in links
               displayed index of all users in your geographic area
                    > providers section...
                    > in-need section...

security:
     - force ssl
     - have log out button


These fundamental features will include accounts, messaging, an exchange system, reviews, search, and fine-grained privacy controls.
     - Back-end framework: Ruby on Rails
     - DBMS: PostgreSQL
     - Testing: RSpec, Cabybara, SitePrism
     - Version control: Git
     - Front-end framework: Ember.js or TBD

     a 8-10 page report discussing what was learned, the design and implementation choices made, the development process, and any future steps

