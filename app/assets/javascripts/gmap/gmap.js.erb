var infowindow = new google.maps.InfoWindow();
var userAround = [];
var curUsers = [];
var markers = [];
var yale = new google.maps.LatLng(41.31845, -72.92226);
var usrMarker = new google.maps.Marker;
var map;


$(document).on('page:load ready', function() {
  var url = "/location/posts"
  initialize();
});

$(document).on('click', '.wizard-forward', function() {
  var center = map.getCenter();
  google.maps.event.trigger(map, "resize");
  map.setCenter(center);
});

$(document).on('click', '.wizard-back', function(){
  var center = map.getCenter();
  google.maps.event.trigger(map, "resize");
  map.setCenter(center);
});


function initialize() {
    var initialLocation;
    var browserSupportFlag = new Boolean();
    var map_canvas = document.getElementById('map_canvas');
    var map_options = {
      zoom: 14,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    }

  map = new google.maps.Map(map_canvas, map_options);
    initialLocation = yale;
    map.setCenter(initialLocation);
    // Try W3C Geolocation 
    // (https://developers.google.com/maps/articles/geolocation)
    if (navigator.geolocation) {
    browserSupportFlag = true;
    navigator.geolocation.getCurrentPosition(function(position) {
      initialLocation = new google.maps.LatLng(position.coords.
                latitude, position.coords.longitude);
      map.setCenter(initialLocation);
      // We want to put a marker on our location
      setUsrMarker([initialLocation.lng(),initialLocation.lat()], map);
      queryNearbyUsers(initialLocation.lat(), 
      initialLocation.lng(), map, 1);
      },function () {
      handleNoGeolocation(browserSupportFlag, map);
      });
    } else {
      browserSupportFlag = false;
      handleNoGeolocation(browserSupportFlag, map);
    }

  google.maps.event.addListener(map, 'dragend', function() {
    var newCenter = map.getCenter();
    queryNearbyUsers(newCenter.lat(), newCenter.lng(), map, 0);
  });

  google.maps.event.addListener(map, 'zoom_changed', function() {
    var newCenter = map.getCenter();
    queryNearbyUsers(newCenter.lat(), newCenter.lng(), map, 0);
  });
}

// TODO: improvement
// Very dump implementation...should be improved!
function filterCurUser(usrInfo, map) {
  var curUsersKeep = []
  var newUsers = []
  var newM = []
  var templist = []
  var templist2 = []
  for (var i = 0; i < usrInfo.length; i++) {
    for (var j=0; j < curUsers.length; j++) {
      // Move to keep list of current markers
      if (usrInfo[i]._id.$oid == curUsers[j]) {
        curUsersKeep.push(j);
        templist.push(curUsers[j]);
        break;
      }
    }
    
    if (j >= curUsers.length) {
      for (var k=0; k < userAround.length; k++) {
        if (usrInfo[i]._id.$oid == userAround[k]) {
          break;
        }
      }
      // Only add if it is not in the keep list either
      if (k >= userAround.length) {
        newUsers.push(usrInfo[i]._id.$oid);
        console.debug(usrInfo[i]);
        var newMarker = addMarkers(map, usrInfo[i]);
        newM.push(newMarker);
      }
    }
  }

  console.debug(newM);  
  var newmarkerlist = []
  for (var i = 0; i < markers.length; i++) {
    // Check if it is in the keeping list
    for (var j = 0; j < curUsersKeep.length; j++) {
      if (curUsersKeep[j] == i) {
        newmarkerlist.push(markers[i]);
        templist2.push(templist[j]);
        break;
      }
    }
    if (j >= curUsersKeep.length) {
      markers[i].setMap(null);
    }
  }

  curUsers = templist2.concat(newUsers);
  markers = newmarkerlist.concat(newM);
  console.debug(curUsers);
}

function setUsrMarker(loc, map) {
  var myLatLng = new google.maps.LatLng(loc[1], loc[0])
  usrMarker.setMap(null);
  usrMarker = new google.maps.Marker ({
    position:myLatLng,
    map: map, 
  });
}

function handleNoGeolocation(errorFlag, map) {
    if (errorFlag == true) {
      console.error("Geolocation service failed...we will put you in Yale");
    }

  var myLatLng = yale;
  setUsrMarker([yale.lng(), yale.lat()], map)
  queryNearbyUsers(myLatLng.lat(), myLatLng.lng(), map, 1);
}

function queryNearbyUsers(lat, lng, map, flg, zl) {
    var url = "/location/posts";
  var zoomlevel = map.getZoom();
    var loc = { loc: [lat, lng], iniflag: flg, zoom: zoomlevel};
        $.ajax({
    type: "POST",
    url: url,
    data: loc,
    dataType: 'json',
    success: function(data) {
      var curUsr = [];
        $.each(data, function(k,userInfo) {
        if (k == "usrNewLoc") {
          if (flg == 1) {
            var newLoc = [parseFloat(userInfo.usrNewLoc[0]),
                    parseFloat(userInfo.usrNewLoc[1])]
            setUsrMarker(newLoc, map);
            map.setCenter(new 
              google.maps.LatLng(newLoc[1], newLoc[0]));
          }
        } else {
          console.debug(userInfo);
          // We never execute this branch
          if (flg < 0) {
            userAround.push(userInfo._id.$oid);
            addMarkers(map,userInfo);
            curUsers = userAround;
          } else {
            curUsr.push(userInfo)
          }
        }
      });

      if (flg < 3) {
        filterCurUser(curUsr,map);
      }
    },
    error: function() {
        console.error("Ajax error!")
    }
  });
}

function addMarkers(map, usr) {
    // console.log(p)
  if (usr.is_provider) {
      var image = {
      size: new google.maps.Size(32, 32),
      url: "<%= asset_path 'house_opt.png' %>",
      // icon: '/images/house.png',
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(12,12)
        };
    } else {
      var image = {
      url: "<%= asset_path 'people_opt.png' %>",
      size: new google.maps.Size(32, 45),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(12,12)
      };    
  }
    
    var shape = {
    coords: [1, 1, 1, 20, 18, 18, 1], 
    type: 'poly'
    };


  var foodIcon="";
  var buddyIcon="";
  var housingIcon="";
  var transportationIcon="";
  var miscIcon="";
  var laundryIcon="";
  var showerIcon="";

  if (usr.food_resource.currently_offered) {
    foodIcon = '<i class="fa fa-cutlery fa-lg" title="Food"></i>'
  }
  if (usr.buddy_resource.currently_offered) {
    buddyIcon = '<i class="fa fa-users fa-lg" title="Buddy"></i>'
  }
    if (usr.housing_resource.currently_offered) {
    housingIcon = '<i class="fa fa-bed fa-lg" title="Housing"></i>'
  }
    if (usr.transportation_resource.currently_offered) {
    transportationIcon = '<i class="fa fa-car fa-lg" title="Transportation"></i>'
  }
  if (usr.misc && usr.misc_resource.currently_offered) {
    miscIcon = '<i class="fa fa-plus fa-lg" title="Miscellaneous"></i>'
  }
  if (usr.laundry_resource.currently_offered) {
    laundryIcon = '<i class="fa fa-tags fa-lg" title="Laundry"></i>'
  }
  if (usr.shower_resource.currently_offered) {
    showerIcon = '<i class="fa fa-street-view fa-lg" title="Shower"></i>'
  }

  var averageRating = usr.average_rating;
  var counter = 0;
  var rating = "&nbsp&nbsp&nbsp&nbsp"

  while (averageRating > 0.67) {
    rating += '<i class="fa fa-star" fa-lg></i>'
    counter++;
    averageRating--;
  }
  if (averageRating > 0.33) {
    rating += '<i class="fa fa-star-half-o" fa-lg></i>'
    counter++;
  }
    while (counter< 5) {
    rating += '<i class="fa fa-star-o" fa-lg></i>'
    counter++;
  }
  
  // Grabing the number of reviews
  var number_reviews = "&nbsp&nbsp&nbsp&nbsp" + 
              usr.number_reviews + " Reviews"

  var moreinfo_button = '<form id="GetMoreUserInfo" method="get" action="' +  url_protocol_domain_port()   + '/users/' + usr._id.$oid + '"><input type="submit" value="More"></form>'
  if (usr.loginflag == 0){
    moreinfo_button = "";
  }

  var contentString = '<div id="content">'+ 

  '<div id="siteNotice">'+ '</div>'+

  housingIcon + foodIcon + transportationIcon + laundryIcon + showerIcon + buddyIcon + rating +

  '<br>' + usr.name + number_reviews + moreinfo_button + 

  '<div id="bodyContent">' + '<b>' + usr.location.city +
  '</b></div>'+'</div>' + "</div>" +  "</div>";

    //      var infowindow = new google.maps.InfoWindow({
    //            content: contentString
    //        });
    
    var myLatLng = new google.maps.LatLng(usr.location.c[1], usr.location.c[0]);
  // console.debug(myLatLng);
    var marker = new google.maps.Marker({
      position: myLatLng,
      icon: image,
      map: map,
      title: usr.name,
      //      shape: shape
      // zIndex: parseInt(p[5])
  });

    google.maps.event.addListener(marker, 'click', function() {
      infowindow.close();
      infowindow.setContent(contentString);
      infowindow.open(map,marker);
  });

  // This listener doesn't help...
  //google.maps.event.addListener(map, 'click', function(event){
  //  infowindow.close();
  //});
  return marker;
}
//   google.maps.event.addDomListener(window, 'load', initialize);



function OnFilterChange(filter) {
  var filters = getCookie("filters").split("%2C");
  if (filter.checked) {
    filters.push(filter.name);
    setCookie("filters", filters.toString().replace(/,/g, "%2C"), 7000);
  } else {
    setCookie("filters", delete_from_array(filters, filter.name).toString().replace(/,/g, "%2C"), 7000);
  }

  var curLat = map.getCenter().lat();
  var curLng = map.getCenter().lng();
  queryNearbyUsers(curLat, curLng, map, 0);
}

function url_protocol_domain_port() {
  var url = window.location.href;
  var arr = url.split("/");
  var result = arr[0] + "//" + arr[2];
  return result;
}

function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; " + expires;
}

function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
}

function delete_from_array(array, element) {
  var index = array.indexOf(element);
  if (index > -1) {
    array.splice(index, 1);
    return array;
  } else {
    return array;
  }
}
